-- Create database and schemas
CREATE DATABASE IF NOT EXISTS EDUPULSE;
USE DATABASE EDUPULSE;
CREATE SCHEMA IF NOT EXISTS CORE;
CREATE SCHEMA IF NOT EXISTS STAGING;

-- Student basic information
CREATE OR REPLACE TABLE CORE.STUDENTS (
    STUDENT_ID VARCHAR(16) PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    DATE_OF_BIRTH DATE,
    GRADE_LEVEL INT,
    SCHOOL_ID VARCHAR(16),
    TEACHER_ID VARCHAR(16),
    PARENT_ID VARCHAR(16),
    ENROLLED_DATE DATE,
    STATUS VARCHAR(10),
    LEARNING_STYLE VARCHAR(50),
    SPECIAL_NEEDS BOOLEAN,
    IEP_FLAG BOOLEAN,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Schools information
CREATE OR REPLACE TABLE CORE.SCHOOLS (
    SCHOOL_ID VARCHAR(16) PRIMARY KEY,
    SCHOOL_NAME VARCHAR(100),
    DISTRICT_ID VARCHAR(16),
    ADDRESS VARCHAR(200),
    CITY VARCHAR(50),
    STATE VARCHAR(2),
    ZIP_CODE VARCHAR(10),
    PHONE VARCHAR(20),
    PRINCIPAL_NAME VARCHAR(100),
    SCHOOL_TYPE VARCHAR(20), -- Elementary, Middle, High
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Teachers information
CREATE OR REPLACE TABLE CORE.TEACHERS (
    TEACHER_ID VARCHAR(16) PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    EMAIL VARCHAR(100),
    SCHOOL_ID VARCHAR(16),
    DEPARTMENT VARCHAR(50),
    HIRE_DATE DATE,
    STATUS VARCHAR(10),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (SCHOOL_ID) REFERENCES CORE.SCHOOLS(SCHOOL_ID)
);

-- Parents/Guardians information
CREATE OR REPLACE TABLE CORE.PARENTS (
    PARENT_ID VARCHAR(16) PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    EMAIL VARCHAR(100),
    PHONE VARCHAR(20),
    RELATIONSHIP VARCHAR(20), -- Mother, Father, Guardian, etc.
    ADDRESS VARCHAR(200),
    CITY VARCHAR(50),
    STATE VARCHAR(2),
    ZIP_CODE VARCHAR(10),
    PREFERRED_CONTACT_METHOD VARCHAR(10),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Subjects and components (breaking down subjects into detailed components)
CREATE OR REPLACE TABLE CORE.SUBJECTS (
    SUBJECT_ID VARCHAR(16) PRIMARY KEY,
    SUBJECT_NAME VARCHAR(50),
    GRADE_LEVEL INT,
    DESCRIPTION TEXT,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE CORE.SUBJECT_COMPONENTS (
    COMPONENT_ID VARCHAR(16) PRIMARY KEY,
    SUBJECT_ID VARCHAR(16),
    COMPONENT_NAME VARCHAR(100),
    DESCRIPTION TEXT,
    LEARNING_OBJECTIVE TEXT,
    GRADE_LEVEL INT,
    WEIGHT FLOAT, -- Importance weight for this component in the subject
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (SUBJECT_ID) REFERENCES CORE.SUBJECTS(SUBJECT_ID)
);

-- ParentVue-style data: Grades
CREATE OR REPLACE TABLE CORE.GRADES (
    GRADE_ID VARCHAR(36) PRIMARY KEY,
    STUDENT_ID VARCHAR(16),
    SUBJECT_ID VARCHAR(16),
    COMPONENT_ID VARCHAR(16), -- Can be NULL if grade is for entire subject
    TEACHER_ID VARCHAR(16),
    GRADE_VALUE FLOAT,
    LETTER_GRADE VARCHAR(2),
    ASSIGNMENT_TYPE VARCHAR(50), -- Homework, Quiz, Test, Project, etc.
    ASSIGNMENT_NAME VARCHAR(100),
    ASSIGNMENT_DESCRIPTION TEXT,
    MAX_POINTS FLOAT,
    EARNED_POINTS FLOAT,
    GRADING_PERIOD VARCHAR(20), -- Q1, Q2, Q3, Q4, Final
    SEMESTER VARCHAR(10), -- Fall, Spring
    SCHOOL_YEAR VARCHAR(9), -- e.g., "2023-2024"
    SUBMISSION_DATE DATE,
    GRADED_DATE DATE,
    COMMENTS TEXT,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (STUDENT_ID) REFERENCES CORE.STUDENTS(STUDENT_ID),
    FOREIGN KEY (SUBJECT_ID) REFERENCES CORE.SUBJECTS(SUBJECT_ID),
    FOREIGN KEY (COMPONENT_ID) REFERENCES CORE.SUBJECT_COMPONENTS(COMPONENT_ID),
    FOREIGN KEY (TEACHER_ID) REFERENCES CORE.TEACHERS(TEACHER_ID)
);

-- ParentVue-style data: Attendance
CREATE OR REPLACE TABLE CORE.ATTENDANCE (
    ATTENDANCE_ID VARCHAR(36) PRIMARY KEY,
    STUDENT_ID VARCHAR(16),
    SCHOOL_ID VARCHAR(16),
    ATTENDANCE_DATE DATE,
    ATTENDANCE_STATUS VARCHAR(20), -- Present, Absent, Tardy, Early Dismissal
    ATTENDANCE_TYPE VARCHAR(20), -- Excused, Unexcused
    REASON VARCHAR(200),
    PERIOD VARCHAR(10), -- 1st, 2nd, etc. or "ALL" for full day
    SUBJECT_ID VARCHAR(16), -- Can be NULL if attendance is for full day
    MINUTES_MISSED INT,
    REPORTED_BY VARCHAR(16),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (STUDENT_ID) REFERENCES CORE.STUDENTS(STUDENT_ID),
    FOREIGN KEY (SCHOOL_ID) REFERENCES CORE.SCHOOLS(SCHOOL_ID),
    FOREIGN KEY (SUBJECT_ID) REFERENCES CORE.SUBJECTS(SUBJECT_ID)
);

-- iReady-style data: Assessment scores and progress
CREATE OR REPLACE TABLE CORE.ASSESSMENTS (
    ASSESSMENT_ID VARCHAR(36) PRIMARY KEY,
    STUDENT_ID VARCHAR(16),
    ASSESSMENT_TYPE VARCHAR(50), -- iReady, NWEA MAP, State Test, etc.
    ASSESSMENT_NAME VARCHAR(100),
    SUBJECT_ID VARCHAR(16),
    COMPONENT_ID VARCHAR(16),
    ASSESSMENT_DATE DATE,
    SCALED_SCORE INT,
    PERCENTILE INT,
    GRADE_LEVEL_EQUIVALENT FLOAT,
    PERFORMANCE_LEVEL VARCHAR(20), -- Below Basic, Basic, Proficient, Advanced
    GROWTH_TARGET INT,
    PREVIOUS_SCORE INT,
    GROWTH_ACTUAL INT,
    TIME_SPENT_MINUTES INT,
    QUESTIONS_ATTEMPTED INT,
    QUESTIONS_CORRECT INT,
    SCHOOL_YEAR VARCHAR(9),
    ASSESSMENT_PERIOD VARCHAR(20), -- Fall, Winter, Spring
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (STUDENT_ID) REFERENCES CORE.STUDENTS(STUDENT_ID),
    FOREIGN KEY (SUBJECT_ID) REFERENCES CORE.SUBJECTS(SUBJECT_ID),
    FOREIGN KEY (COMPONENT_ID) REFERENCES CORE.SUBJECT_COMPONENTS(COMPONENT_ID)
);

-- iReady-style data: Learning path progress
CREATE OR REPLACE TABLE CORE.LEARNING_PROGRESS (
    PROGRESS_ID VARCHAR(36) PRIMARY KEY,
    STUDENT_ID VARCHAR(16),
    SUBJECT_ID VARCHAR(16),
    COMPONENT_ID VARCHAR(16),
    LESSON_ID VARCHAR(36),
    LESSON_NAME VARCHAR(100),
    LESSON_TYPE VARCHAR(50),
    START_DATE DATE,
    COMPLETION_DATE DATE,
    STATUS VARCHAR(20), -- Not Started, In Progress, Completed, Failed
    SCORE FLOAT,
    PASSING_SCORE FLOAT,
    TIME_SPENT_MINUTES INT,
    ATTEMPTS INT,
    DIFFICULTY_LEVEL VARCHAR(20), -- Easy, Medium, Hard, Adaptive
    PLATFORM VARCHAR(50), -- iReady, Khan Academy, etc.
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (STUDENT_ID) REFERENCES CORE.STUDENTS(STUDENT_ID),
    FOREIGN KEY (SUBJECT_ID) REFERENCES CORE.SUBJECTS(SUBJECT_ID),
    FOREIGN KEY (COMPONENT_ID) REFERENCES CORE.SUBJECT_COMPONENTS(COMPONENT_ID)
);

-- Google Drive - Lesson plans and documents metadata
CREATE OR REPLACE TABLE CORE.DOCUMENTS (
    DOCUMENT_ID VARCHAR(36) PRIMARY KEY,
    DOCUMENT_TYPE VARCHAR(20), -- Lesson Plan, Homework, Study Guide, etc.
    TITLE VARCHAR(200),
    DESCRIPTION TEXT,
    SUBJECT_ID VARCHAR(16),
    COMPONENT_ID VARCHAR(16),
    TEACHER_ID VARCHAR(16),
    GRADE_LEVEL INT,
    DOCUMENT_DATE DATE,
    FILE_PATH VARCHAR(500),
    FILE_TYPE VARCHAR(10), -- PDF, DOCX, etc.
    FILE_SIZE_KB INT,
    CONTENT TEXT, -- Extracted text content
    CONTENT_SUMMARY TEXT, -- AI-generated summary
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (SUBJECT_ID) REFERENCES CORE.SUBJECTS(SUBJECT_ID),
    FOREIGN KEY (COMPONENT_ID) REFERENCES CORE.SUBJECT_COMPONENTS(COMPONENT_ID),
    FOREIGN KEY (TEACHER_ID) REFERENCES CORE.TEACHERS(TEACHER_ID)
);

-- LandingAI - Media metadata for student projects
CREATE OR REPLACE TABLE CORE.MEDIA (
    MEDIA_ID VARCHAR(36) PRIMARY KEY,
    STUDENT_ID VARCHAR(16),
    MEDIA_TYPE VARCHAR(20), -- Video, Image, Audio
    TITLE VARCHAR(200),
    DESCRIPTION TEXT,
    SUBJECT_ID VARCHAR(16),
    COMPONENT_ID VARCHAR(16),
    PROJECT_NAME VARCHAR(200),
    MEDIA_DATE DATE,
    FILE_PATH VARCHAR(500),
    FILE_TYPE VARCHAR(10), -- MP4, JPG, etc.
    FILE_SIZE_KB INT,
    DURATION_SECONDS INT, -- For videos/audio
    TRANSCRIPT TEXT, -- For videos/audio
    CONTENT_SUMMARY TEXT, -- AI-generated summary
    AI_TAGS ARRAY, -- Array of AI-detected tags
    SENTIMENT_SCORE FLOAT, -- AI-analyzed sentiment
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (STUDENT_ID) REFERENCES CORE.STUDENTS(STUDENT_ID),
    FOREIGN KEY (SUBJECT_ID) REFERENCES CORE.SUBJECTS(SUBJECT_ID),
    FOREIGN KEY (COMPONENT_ID) REFERENCES CORE.SUBJECT_COMPONENTS(COMPONENT_ID)
);

-- Student interests and strengths (for career recommendations)
CREATE OR REPLACE TABLE CORE.STUDENT_INTERESTS (
    INTEREST_ID VARCHAR(36) PRIMARY KEY,
    STUDENT_ID VARCHAR(16),
    INTEREST_AREA VARCHAR(100),
    INTEREST_LEVEL INT, -- 1-10 scale
    SOURCE VARCHAR(50), -- Self-reported, Teacher-observed, AI-inferred
    NOTES TEXT,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (STUDENT_ID) REFERENCES CORE.STUDENTS(STUDENT_ID)
);

-- Career path suggestions based on performance and interests
CREATE OR REPLACE TABLE CORE.CAREER_SUGGESTIONS (
    SUGGESTION_ID VARCHAR(36) PRIMARY KEY,
    STUDENT_ID VARCHAR(16),
    CAREER_PATH VARCHAR(100),
    CONFIDENCE_SCORE FLOAT, -- AI confidence in this suggestion
    RELATED_SUBJECTS ARRAY, -- Array of related subjects
    RELATED_SKILLS ARRAY, -- Array of related skills
    SUGGESTION_RATIONALE TEXT, -- Why this career was suggested
    RECOMMENDED_ACTIVITIES TEXT, -- Activities to pursue for this path
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (STUDENT_ID) REFERENCES CORE.STUDENTS(STUDENT_ID)
);

-- Teacher comments and observations
CREATE OR REPLACE TABLE CORE.TEACHER_COMMENTS (
    COMMENT_ID VARCHAR(36) PRIMARY KEY,
    STUDENT_ID VARCHAR(16),
    TEACHER_ID VARCHAR(16),
    SUBJECT_ID VARCHAR(16),
    COMPONENT_ID VARCHAR(16),
    COMMENT_DATE DATE,
    COMMENT_TEXT TEXT,
    COMMENT_TYPE VARCHAR(50), -- Progress, Behavior, Strength, Challenge
    VISIBILITY VARCHAR(20), -- Internal, Parent-visible, Student-visible
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (STUDENT_ID) REFERENCES CORE.STUDENTS(STUDENT_ID),
    FOREIGN KEY (TEACHER_ID) REFERENCES CORE.TEACHERS(TEACHER_ID),
    FOREIGN KEY (SUBJECT_ID) REFERENCES CORE.SUBJECTS(SUBJECT_ID),
    FOREIGN KEY (COMPONENT_ID) REFERENCES CORE.SUBJECT_COMPONENTS(COMPONENT_ID)
);

-- Daily student progress summary (for quick daily reports)
CREATE OR REPLACE TABLE CORE.DAILY_PROGRESS (
    PROGRESS_ID VARCHAR(36) PRIMARY KEY,
    STUDENT_ID VARCHAR(16),
    PROGRESS_DATE DATE,
    ATTENDANCE_STATUS VARCHAR(20),
    ASSIGNMENTS_DUE INT,
    ASSIGNMENTS_COMPLETED INT,
    AVERAGE_DAILY_GRADE FLOAT,
    MINUTES_SPENT_LEARNING INT,
    BEHAVIORAL_NOTES TEXT,
    HIGHLIGHTS TEXT, -- Key achievements/challenges of the day
    AI_RECOMMENDATIONS TEXT, -- Daily personalized recommendations
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (STUDENT_ID) REFERENCES CORE.STUDENTS(STUDENT_ID)
);

-- Views for simplified access

-- Daily student progress view
CREATE OR REPLACE VIEW CORE.VW_DAILY_STUDENT_PROGRESS AS
SELECT
    dp.PROGRESS_DATE,
    s.STUDENT_ID,
    s.FIRST_NAME || ' ' || s.LAST_NAME AS STUDENT_NAME,
    s.GRADE_LEVEL,
    dp.ATTENDANCE_STATUS,
    dp.ASSIGNMENTS_DUE,
    dp.ASSIGNMENTS_COMPLETED,
    dp.AVERAGE_DAILY_GRADE,
    dp.MINUTES_SPENT_LEARNING,
    dp.HIGHLIGHTS,
    dp.AI_RECOMMENDATIONS
FROM
    CORE.DAILY_PROGRESS dp
JOIN
    CORE.STUDENTS s ON dp.STUDENT_ID = s.STUDENT_ID;

-- Student subject performance view
CREATE OR REPLACE VIEW CORE.VW_STUDENT_SUBJECT_PERFORMANCE AS
SELECT
    s.STUDENT_ID,
    s.FIRST_NAME || ' ' || s.LAST_NAME AS STUDENT_NAME,
    s.GRADE_LEVEL,
    sub.SUBJECT_NAME,
    AVG(g.GRADE_VALUE) AS AVERAGE_GRADE,
    MAX(g.GRADED_DATE) AS LAST_GRADED_DATE,
    COUNT(g.GRADE_ID) AS ASSIGNMENT_COUNT
FROM
    CORE.STUDENTS s
JOIN
    CORE.GRADES g ON s.STUDENT_ID = g.STUDENT_ID
JOIN
    CORE.SUBJECTS sub ON g.SUBJECT_ID = sub.SUBJECT_ID
GROUP BY
    s.STUDENT_ID, s.FIRST_NAME, s.LAST_NAME, s.GRADE_LEVEL, sub.SUBJECT_NAME;

-- Student component performance view (detailed breakdown)
CREATE OR REPLACE VIEW CORE.VW_STUDENT_COMPONENT_PERFORMANCE AS
SELECT
    s.STUDENT_ID,
    s.FIRST_NAME || ' ' || s.LAST_NAME AS STUDENT_NAME,
    sub.SUBJECT_NAME,
    sc.COMPONENT_NAME,
    AVG(g.GRADE_VALUE) AS AVERAGE_GRADE,
    MAX(g.GRADED_DATE) AS LAST_GRADED_DATE,
    COUNT(g.GRADE_ID) AS ASSIGNMENT_COUNT
FROM
    CORE.STUDENTS s
JOIN
    CORE.GRADES g ON s.STUDENT_ID = g.STUDENT_ID
JOIN
    CORE.SUBJECTS sub ON g.SUBJECT_ID = sub.SUBJECT_ID
JOIN
    CORE.SUBJECT_COMPONENTS sc ON g.COMPONENT_ID = sc.COMPONENT_ID
GROUP BY
    s.STUDENT_ID, s.FIRST_NAME, s.LAST_NAME, sub.SUBJECT_NAME, sc.COMPONENT_NAME;

-- Assessment growth view
CREATE OR REPLACE VIEW CORE.VW_STUDENT_ASSESSMENT_GROWTH AS
SELECT
    s.STUDENT_ID,
    s.FIRST_NAME || ' ' || s.LAST_NAME AS STUDENT_NAME,
    a.ASSESSMENT_TYPE,
    a.SUBJECT_ID,
    sub.SUBJECT_NAME,
    a.ASSESSMENT_PERIOD,
    a.SCHOOL_YEAR,
    a.SCALED_SCORE,
    a.PREVIOUS_SCORE,
    a.GROWTH_ACTUAL,
    a.GROWTH_TARGET,
    a.PERFORMANCE_LEVEL
FROM
    CORE.STUDENTS s
JOIN
    CORE.ASSESSMENTS a ON s.STUDENT_ID = a.STUDENT_ID
JOIN
    CORE.SUBJECTS sub ON a.SUBJECT_ID = sub.SUBJECT_ID;

-- Career recommendations view
  CREATE OR REPLACE VIEW CORE.VW_STUDENT_CAREER_RECOMMENDATIONS AS
  SELECT
      s.STUDENT_ID,
      s.FIRST_NAME || ' ' || s.LAST_NAME AS STUDENT_NAME,
      s.GRADE_LEVEL,
      cs.CAREER_PATH,
      cs.CONFIDENCE_SCORE,
      cs.RELATED_SUBJECTS,
      cs.RELATED_SKILLS,
      cs.SUGGESTION_RATIONALE,  -- Changed from RECOMMENDATION_RATIONALE to match table definition
      cs.RECOMMENDED_ACTIVITIES
  FROM
      CORE.STUDENTS s
  JOIN
      CORE.CAREER_SUGGESTIONS cs ON s.STUDENT_ID = cs.STUDENT_ID;
